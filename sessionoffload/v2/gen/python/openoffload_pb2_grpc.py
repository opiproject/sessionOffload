# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import openoffload_pb2 as openoffload__pb2


class SessionTableStub(object):
    """
    The session table was combined with the statistices service
    in v1alpha4 to simplfy the code.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddSession = channel.stream_unary(
                '/openoffload.v1.SessionTable/AddSession',
                request_serializer=openoffload__pb2.SessionRequest.SerializeToString,
                response_deserializer=openoffload__pb2.AddSessionResponse.FromString,
                )
        self.GetSession = channel.unary_unary(
                '/openoffload.v1.SessionTable/GetSession',
                request_serializer=openoffload__pb2.SessionId.SerializeToString,
                response_deserializer=openoffload__pb2.SessionResponse.FromString,
                )
        self.DeleteSession = channel.unary_unary(
                '/openoffload.v1.SessionTable/DeleteSession',
                request_serializer=openoffload__pb2.SessionId.SerializeToString,
                response_deserializer=openoffload__pb2.SessionResponse.FromString,
                )
        self.GetAllSessions = channel.unary_unary(
                '/openoffload.v1.SessionTable/GetAllSessions',
                request_serializer=openoffload__pb2.SessionRequestArgs.SerializeToString,
                response_deserializer=openoffload__pb2.SessionResponses.FromString,
                )
        self.GetClosedSessions = channel.unary_stream(
                '/openoffload.v1.SessionTable/GetClosedSessions',
                request_serializer=openoffload__pb2.SessionRequestArgs.SerializeToString,
                response_deserializer=openoffload__pb2.SessionResponse.FromString,
                )


class SessionTableServicer(object):
    """
    The session table was combined with the statistices service
    in v1alpha4 to simplfy the code.

    """

    def AddSession(self, request_iterator, context):
        """
        Adds a session
        This was changed in v1alpha4 to be a streaming API, for performance
        reasons.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSession(self, request, context):
        """
        Obtains the session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSession(self, request, context):
        """
        Delete a session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllSessions(self, request, context):
        """
        Stream back a specific session or all current sessions
        To stream a single session, pass SessionId as zero
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClosedSessions(self, request, context):
        """
        statistics as a outgoing session from the WB to Applications ?
        grpc seems to need a request input streamId is a placeholder
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SessionTableServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddSession': grpc.stream_unary_rpc_method_handler(
                    servicer.AddSession,
                    request_deserializer=openoffload__pb2.SessionRequest.FromString,
                    response_serializer=openoffload__pb2.AddSessionResponse.SerializeToString,
            ),
            'GetSession': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSession,
                    request_deserializer=openoffload__pb2.SessionId.FromString,
                    response_serializer=openoffload__pb2.SessionResponse.SerializeToString,
            ),
            'DeleteSession': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSession,
                    request_deserializer=openoffload__pb2.SessionId.FromString,
                    response_serializer=openoffload__pb2.SessionResponse.SerializeToString,
            ),
            'GetAllSessions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllSessions,
                    request_deserializer=openoffload__pb2.SessionRequestArgs.FromString,
                    response_serializer=openoffload__pb2.SessionResponses.SerializeToString,
            ),
            'GetClosedSessions': grpc.unary_stream_rpc_method_handler(
                    servicer.GetClosedSessions,
                    request_deserializer=openoffload__pb2.SessionRequestArgs.FromString,
                    response_serializer=openoffload__pb2.SessionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'openoffload.v1.SessionTable', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SessionTable(object):
    """
    The session table was combined with the statistices service
    in v1alpha4 to simplfy the code.

    """

    @staticmethod
    def AddSession(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/openoffload.v1.SessionTable/AddSession',
            openoffload__pb2.SessionRequest.SerializeToString,
            openoffload__pb2.AddSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openoffload.v1.SessionTable/GetSession',
            openoffload__pb2.SessionId.SerializeToString,
            openoffload__pb2.SessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openoffload.v1.SessionTable/DeleteSession',
            openoffload__pb2.SessionId.SerializeToString,
            openoffload__pb2.SessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openoffload.v1.SessionTable/GetAllSessions',
            openoffload__pb2.SessionRequestArgs.SerializeToString,
            openoffload__pb2.SessionResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClosedSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/openoffload.v1.SessionTable/GetClosedSessions',
            openoffload__pb2.SessionRequestArgs.SerializeToString,
            openoffload__pb2.SessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
