// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: openoffload.proto
// Original file comments:
// Copyright (C) 2020 AT&T Intellectual Property. All rights reserved.
// Copyright (C) 2020 Palo Alto Networks Intellectual Property. All rights reserved.
// Copyright (C) 2022 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#ifndef GRPC_openoffload_2eproto__INCLUDED
#define GRPC_openoffload_2eproto__INCLUDED

#include "openoffload.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace openoffload {
namespace v2 {

//
// The session table was combined with the statistices service
// in v1alpha4 to simplfy the code.
//
class SessionTable final {
 public:
  static constexpr char const* service_full_name() {
    return "openoffload.v2.SessionTable";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Adds a session
    // This was changed in v1alpha4 to be a streaming API, for performance
    // reasons.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::openoffload::v2::SessionRequest>> AddSession(::grpc::ClientContext* context, ::openoffload::v2::AddSessionResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::openoffload::v2::SessionRequest>>(AddSessionRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::openoffload::v2::SessionRequest>> AsyncAddSession(::grpc::ClientContext* context, ::openoffload::v2::AddSessionResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::openoffload::v2::SessionRequest>>(AsyncAddSessionRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::openoffload::v2::SessionRequest>> PrepareAsyncAddSession(::grpc::ClientContext* context, ::openoffload::v2::AddSessionResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::openoffload::v2::SessionRequest>>(PrepareAsyncAddSessionRaw(context, response, cq));
    }
    //
    // Obtains the session
    virtual ::grpc::Status GetSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::openoffload::v2::SessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponse>> AsyncGetSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponse>>(AsyncGetSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponse>> PrepareAsyncGetSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponse>>(PrepareAsyncGetSessionRaw(context, request, cq));
    }
    //
    // Delete a session
    virtual ::grpc::Status DeleteSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::openoffload::v2::SessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponse>> AsyncDeleteSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponse>>(AsyncDeleteSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponse>> PrepareAsyncDeleteSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponse>>(PrepareAsyncDeleteSessionRaw(context, request, cq));
    }
    //
    // Stream back a specific session or all current sessions
    // To stream a single session, pass SessionId as zero
    virtual ::grpc::Status GetAllSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::openoffload::v2::SessionResponses* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponses>> AsyncGetAllSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponses>>(AsyncGetAllSessionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponses>> PrepareAsyncGetAllSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponses>>(PrepareAsyncGetAllSessionsRaw(context, request, cq));
    }
    //
    // statistics as a outgoing session from the WB to Applications ?
    // grpc seems to need a request input streamId is a placeholder
    std::unique_ptr< ::grpc::ClientReaderInterface< ::openoffload::v2::SessionResponse>> GetClosedSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::openoffload::v2::SessionResponse>>(GetClosedSessionsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::openoffload::v2::SessionResponse>> AsyncGetClosedSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::openoffload::v2::SessionResponse>>(AsyncGetClosedSessionsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::openoffload::v2::SessionResponse>> PrepareAsyncGetClosedSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::openoffload::v2::SessionResponse>>(PrepareAsyncGetClosedSessionsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // Adds a session
      // This was changed in v1alpha4 to be a streaming API, for performance
      // reasons.
      virtual void AddSession(::grpc::ClientContext* context, ::openoffload::v2::AddSessionResponse* response, ::grpc::ClientWriteReactor< ::openoffload::v2::SessionRequest>* reactor) = 0;
      //
      // Obtains the session
      virtual void GetSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId* request, ::openoffload::v2::SessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId* request, ::openoffload::v2::SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Delete a session
      virtual void DeleteSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId* request, ::openoffload::v2::SessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId* request, ::openoffload::v2::SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Stream back a specific session or all current sessions
      // To stream a single session, pass SessionId as zero
      virtual void GetAllSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs* request, ::openoffload::v2::SessionResponses* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs* request, ::openoffload::v2::SessionResponses* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // statistics as a outgoing session from the WB to Applications ?
      // grpc seems to need a request input streamId is a placeholder
      virtual void GetClosedSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs* request, ::grpc::ClientReadReactor< ::openoffload::v2::SessionResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::openoffload::v2::SessionRequest>* AddSessionRaw(::grpc::ClientContext* context, ::openoffload::v2::AddSessionResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::openoffload::v2::SessionRequest>* AsyncAddSessionRaw(::grpc::ClientContext* context, ::openoffload::v2::AddSessionResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::openoffload::v2::SessionRequest>* PrepareAsyncAddSessionRaw(::grpc::ClientContext* context, ::openoffload::v2::AddSessionResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponse>* AsyncGetSessionRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponse>* PrepareAsyncGetSessionRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponse>* AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponse>* PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponses>* AsyncGetAllSessionsRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openoffload::v2::SessionResponses>* PrepareAsyncGetAllSessionsRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::openoffload::v2::SessionResponse>* GetClosedSessionsRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::openoffload::v2::SessionResponse>* AsyncGetClosedSessionsRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::openoffload::v2::SessionResponse>* PrepareAsyncGetClosedSessionsRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::openoffload::v2::SessionRequest>> AddSession(::grpc::ClientContext* context, ::openoffload::v2::AddSessionResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::openoffload::v2::SessionRequest>>(AddSessionRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::openoffload::v2::SessionRequest>> AsyncAddSession(::grpc::ClientContext* context, ::openoffload::v2::AddSessionResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::openoffload::v2::SessionRequest>>(AsyncAddSessionRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::openoffload::v2::SessionRequest>> PrepareAsyncAddSession(::grpc::ClientContext* context, ::openoffload::v2::AddSessionResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::openoffload::v2::SessionRequest>>(PrepareAsyncAddSessionRaw(context, response, cq));
    }
    ::grpc::Status GetSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::openoffload::v2::SessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponse>> AsyncGetSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponse>>(AsyncGetSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponse>> PrepareAsyncGetSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponse>>(PrepareAsyncGetSessionRaw(context, request, cq));
    }
    ::grpc::Status DeleteSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::openoffload::v2::SessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponse>> AsyncDeleteSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponse>>(AsyncDeleteSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponse>> PrepareAsyncDeleteSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponse>>(PrepareAsyncDeleteSessionRaw(context, request, cq));
    }
    ::grpc::Status GetAllSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::openoffload::v2::SessionResponses* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponses>> AsyncGetAllSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponses>>(AsyncGetAllSessionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponses>> PrepareAsyncGetAllSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponses>>(PrepareAsyncGetAllSessionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::openoffload::v2::SessionResponse>> GetClosedSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::openoffload::v2::SessionResponse>>(GetClosedSessionsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::openoffload::v2::SessionResponse>> AsyncGetClosedSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::openoffload::v2::SessionResponse>>(AsyncGetClosedSessionsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::openoffload::v2::SessionResponse>> PrepareAsyncGetClosedSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::openoffload::v2::SessionResponse>>(PrepareAsyncGetClosedSessionsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddSession(::grpc::ClientContext* context, ::openoffload::v2::AddSessionResponse* response, ::grpc::ClientWriteReactor< ::openoffload::v2::SessionRequest>* reactor) override;
      void GetSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId* request, ::openoffload::v2::SessionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId* request, ::openoffload::v2::SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId* request, ::openoffload::v2::SessionResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteSession(::grpc::ClientContext* context, const ::openoffload::v2::SessionId* request, ::openoffload::v2::SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs* request, ::openoffload::v2::SessionResponses* response, std::function<void(::grpc::Status)>) override;
      void GetAllSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs* request, ::openoffload::v2::SessionResponses* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetClosedSessions(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs* request, ::grpc::ClientReadReactor< ::openoffload::v2::SessionResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::openoffload::v2::SessionRequest>* AddSessionRaw(::grpc::ClientContext* context, ::openoffload::v2::AddSessionResponse* response) override;
    ::grpc::ClientAsyncWriter< ::openoffload::v2::SessionRequest>* AsyncAddSessionRaw(::grpc::ClientContext* context, ::openoffload::v2::AddSessionResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::openoffload::v2::SessionRequest>* PrepareAsyncAddSessionRaw(::grpc::ClientContext* context, ::openoffload::v2::AddSessionResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponse>* AsyncGetSessionRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponse>* PrepareAsyncGetSessionRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponse>* AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponse>* PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponses>* AsyncGetAllSessionsRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openoffload::v2::SessionResponses>* PrepareAsyncGetAllSessionsRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::openoffload::v2::SessionResponse>* GetClosedSessionsRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request) override;
    ::grpc::ClientAsyncReader< ::openoffload::v2::SessionResponse>* AsyncGetClosedSessionsRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::openoffload::v2::SessionResponse>* PrepareAsyncGetClosedSessionsRaw(::grpc::ClientContext* context, const ::openoffload::v2::SessionRequestArgs& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddSession_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSession_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSession_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllSessions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetClosedSessions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Adds a session
    // This was changed in v1alpha4 to be a streaming API, for performance
    // reasons.
    virtual ::grpc::Status AddSession(::grpc::ServerContext* context, ::grpc::ServerReader< ::openoffload::v2::SessionRequest>* reader, ::openoffload::v2::AddSessionResponse* response);
    //
    // Obtains the session
    virtual ::grpc::Status GetSession(::grpc::ServerContext* context, const ::openoffload::v2::SessionId* request, ::openoffload::v2::SessionResponse* response);
    //
    // Delete a session
    virtual ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::openoffload::v2::SessionId* request, ::openoffload::v2::SessionResponse* response);
    //
    // Stream back a specific session or all current sessions
    // To stream a single session, pass SessionId as zero
    virtual ::grpc::Status GetAllSessions(::grpc::ServerContext* context, const ::openoffload::v2::SessionRequestArgs* request, ::openoffload::v2::SessionResponses* response);
    //
    // statistics as a outgoing session from the WB to Applications ?
    // grpc seems to need a request input streamId is a placeholder
    virtual ::grpc::Status GetClosedSessions(::grpc::ServerContext* context, const ::openoffload::v2::SessionRequestArgs* request, ::grpc::ServerWriter< ::openoffload::v2::SessionResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSession(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::openoffload::v2::SessionRequest>* /*reader*/, ::openoffload::v2::AddSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddSession(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::openoffload::v2::AddSessionResponse, ::openoffload::v2::SessionRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionId* /*request*/, ::openoffload::v2::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSession(::grpc::ServerContext* context, ::openoffload::v2::SessionId* request, ::grpc::ServerAsyncResponseWriter< ::openoffload::v2::SessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSession() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionId* /*request*/, ::openoffload::v2::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSession(::grpc::ServerContext* context, ::openoffload::v2::SessionId* request, ::grpc::ServerAsyncResponseWriter< ::openoffload::v2::SessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllSessions() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetAllSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSessions(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionRequestArgs* /*request*/, ::openoffload::v2::SessionResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllSessions(::grpc::ServerContext* context, ::openoffload::v2::SessionRequestArgs* request, ::grpc::ServerAsyncResponseWriter< ::openoffload::v2::SessionResponses>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetClosedSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetClosedSessions() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetClosedSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClosedSessions(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionRequestArgs* /*request*/, ::grpc::ServerWriter< ::openoffload::v2::SessionResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClosedSessions(::grpc::ServerContext* context, ::openoffload::v2::SessionRequestArgs* request, ::grpc::ServerAsyncWriter< ::openoffload::v2::SessionResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddSession<WithAsyncMethod_GetSession<WithAsyncMethod_DeleteSession<WithAsyncMethod_GetAllSessions<WithAsyncMethod_GetClosedSessions<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddSession() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::openoffload::v2::SessionRequest, ::openoffload::v2::AddSessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::openoffload::v2::AddSessionResponse* response) { return this->AddSession(context, response); }));
    }
    ~WithCallbackMethod_AddSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSession(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::openoffload::v2::SessionRequest>* /*reader*/, ::openoffload::v2::AddSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::openoffload::v2::SessionRequest>* AddSession(
      ::grpc::CallbackServerContext* /*context*/, ::openoffload::v2::AddSessionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSession() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::openoffload::v2::SessionId, ::openoffload::v2::SessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openoffload::v2::SessionId* request, ::openoffload::v2::SessionResponse* response) { return this->GetSession(context, request, response); }));}
    void SetMessageAllocatorFor_GetSession(
        ::grpc::MessageAllocator< ::openoffload::v2::SessionId, ::openoffload::v2::SessionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openoffload::v2::SessionId, ::openoffload::v2::SessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionId* /*request*/, ::openoffload::v2::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSession(
      ::grpc::CallbackServerContext* /*context*/, const ::openoffload::v2::SessionId* /*request*/, ::openoffload::v2::SessionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteSession() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::openoffload::v2::SessionId, ::openoffload::v2::SessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openoffload::v2::SessionId* request, ::openoffload::v2::SessionResponse* response) { return this->DeleteSession(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSession(
        ::grpc::MessageAllocator< ::openoffload::v2::SessionId, ::openoffload::v2::SessionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openoffload::v2::SessionId, ::openoffload::v2::SessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionId* /*request*/, ::openoffload::v2::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSession(
      ::grpc::CallbackServerContext* /*context*/, const ::openoffload::v2::SessionId* /*request*/, ::openoffload::v2::SessionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllSessions() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::openoffload::v2::SessionRequestArgs, ::openoffload::v2::SessionResponses>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openoffload::v2::SessionRequestArgs* request, ::openoffload::v2::SessionResponses* response) { return this->GetAllSessions(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllSessions(
        ::grpc::MessageAllocator< ::openoffload::v2::SessionRequestArgs, ::openoffload::v2::SessionResponses>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openoffload::v2::SessionRequestArgs, ::openoffload::v2::SessionResponses>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSessions(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionRequestArgs* /*request*/, ::openoffload::v2::SessionResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllSessions(
      ::grpc::CallbackServerContext* /*context*/, const ::openoffload::v2::SessionRequestArgs* /*request*/, ::openoffload::v2::SessionResponses* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetClosedSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetClosedSessions() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::openoffload::v2::SessionRequestArgs, ::openoffload::v2::SessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openoffload::v2::SessionRequestArgs* request) { return this->GetClosedSessions(context, request); }));
    }
    ~WithCallbackMethod_GetClosedSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClosedSessions(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionRequestArgs* /*request*/, ::grpc::ServerWriter< ::openoffload::v2::SessionResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::openoffload::v2::SessionResponse>* GetClosedSessions(
      ::grpc::CallbackServerContext* /*context*/, const ::openoffload::v2::SessionRequestArgs* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddSession<WithCallbackMethod_GetSession<WithCallbackMethod_DeleteSession<WithCallbackMethod_GetAllSessions<WithCallbackMethod_GetClosedSessions<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSession(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::openoffload::v2::SessionRequest>* /*reader*/, ::openoffload::v2::AddSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionId* /*request*/, ::openoffload::v2::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSession() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionId* /*request*/, ::openoffload::v2::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllSessions() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetAllSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSessions(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionRequestArgs* /*request*/, ::openoffload::v2::SessionResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetClosedSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetClosedSessions() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetClosedSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClosedSessions(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionRequestArgs* /*request*/, ::grpc::ServerWriter< ::openoffload::v2::SessionResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSession(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::openoffload::v2::SessionRequest>* /*reader*/, ::openoffload::v2::AddSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddSession(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSession() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionId* /*request*/, ::openoffload::v2::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSession() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionId* /*request*/, ::openoffload::v2::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllSessions() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetAllSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSessions(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionRequestArgs* /*request*/, ::openoffload::v2::SessionResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllSessions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetClosedSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetClosedSessions() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetClosedSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClosedSessions(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionRequestArgs* /*request*/, ::grpc::ServerWriter< ::openoffload::v2::SessionResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClosedSessions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddSession() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->AddSession(context, response); }));
    }
    ~WithRawCallbackMethod_AddSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSession(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::openoffload::v2::SessionRequest>* /*reader*/, ::openoffload::v2::AddSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* AddSession(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSession() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionId* /*request*/, ::openoffload::v2::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteSession() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionId* /*request*/, ::openoffload::v2::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllSessions() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllSessions(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSessions(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionRequestArgs* /*request*/, ::openoffload::v2::SessionResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllSessions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetClosedSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetClosedSessions() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetClosedSessions(context, request); }));
    }
    ~WithRawCallbackMethod_GetClosedSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClosedSessions(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionRequestArgs* /*request*/, ::grpc::ServerWriter< ::openoffload::v2::SessionResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetClosedSessions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openoffload::v2::SessionId, ::openoffload::v2::SessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openoffload::v2::SessionId, ::openoffload::v2::SessionResponse>* streamer) {
                       return this->StreamedGetSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionId* /*request*/, ::openoffload::v2::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openoffload::v2::SessionId,::openoffload::v2::SessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSession() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openoffload::v2::SessionId, ::openoffload::v2::SessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openoffload::v2::SessionId, ::openoffload::v2::SessionResponse>* streamer) {
                       return this->StreamedDeleteSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionId* /*request*/, ::openoffload::v2::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openoffload::v2::SessionId,::openoffload::v2::SessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllSessions() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openoffload::v2::SessionRequestArgs, ::openoffload::v2::SessionResponses>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openoffload::v2::SessionRequestArgs, ::openoffload::v2::SessionResponses>* streamer) {
                       return this->StreamedGetAllSessions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllSessions(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionRequestArgs* /*request*/, ::openoffload::v2::SessionResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllSessions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openoffload::v2::SessionRequestArgs,::openoffload::v2::SessionResponses>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSession<WithStreamedUnaryMethod_DeleteSession<WithStreamedUnaryMethod_GetAllSessions<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetClosedSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetClosedSessions() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::openoffload::v2::SessionRequestArgs, ::openoffload::v2::SessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::openoffload::v2::SessionRequestArgs, ::openoffload::v2::SessionResponse>* streamer) {
                       return this->StreamedGetClosedSessions(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetClosedSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetClosedSessions(::grpc::ServerContext* /*context*/, const ::openoffload::v2::SessionRequestArgs* /*request*/, ::grpc::ServerWriter< ::openoffload::v2::SessionResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetClosedSessions(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::openoffload::v2::SessionRequestArgs,::openoffload::v2::SessionResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetClosedSessions<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetSession<WithStreamedUnaryMethod_DeleteSession<WithStreamedUnaryMethod_GetAllSessions<WithSplitStreamingMethod_GetClosedSessions<Service > > > > StreamedService;
};

}  // namespace v2
}  // namespace openoffload


#endif  // GRPC_openoffload_2eproto__INCLUDED
