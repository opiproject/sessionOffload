// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tunneloffload.proto
// Original file comments:
// Copyright (C) 2022 DriveNets Ltd. Intellectual Property. All rights reserved.
// Copyright (C) 2022 VMware, Inc. All rights reserved.
// Copyright (C) 2022 AT&T Intellectual Property. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#ifndef GRPC_tunneloffload_2eproto__INCLUDED
#define GRPC_tunneloffload_2eproto__INCLUDED

#include "tunneloffload.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace tunneloffload {
namespace v2 {

class IpTunnelService final {
 public:
  static constexpr char const* service_full_name() {
    return "tunneloffload.v2.IpTunnelService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get which capabilities are available while using the
    virtual ::grpc::Status Capabilities(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest& request, ::tunneloffload::v2::CapabilityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::CapabilityResponse>> AsyncCapabilities(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::CapabilityResponse>>(AsyncCapabilitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::CapabilityResponse>> PrepareAsyncCapabilities(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::CapabilityResponse>>(PrepareAsyncCapabilitiesRaw(context, request, cq));
    }
    // Creation of IP Tunnel
    // This API should be generic and allow creations of many IP tunnels
    std::unique_ptr< ::grpc::ClientWriterInterface< ::tunneloffload::v2::IpTunnelRequest>> CreateIpTunnel(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::tunneloffload::v2::IpTunnelRequest>>(CreateIpTunnelRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tunneloffload::v2::IpTunnelRequest>> AsyncCreateIpTunnel(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tunneloffload::v2::IpTunnelRequest>>(AsyncCreateIpTunnelRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tunneloffload::v2::IpTunnelRequest>> PrepareAsyncCreateIpTunnel(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tunneloffload::v2::IpTunnelRequest>>(PrepareAsyncCreateIpTunnelRaw(context, response, cq));
    }
    // Getting a tunnel by it's ID
    virtual ::grpc::Status GetIpTunnel(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::tunneloffload::v2::IpTunnelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::IpTunnelResponse>> AsyncGetIpTunnel(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::IpTunnelResponse>>(AsyncGetIpTunnelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::IpTunnelResponse>> PrepareAsyncGetIpTunnel(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::IpTunnelResponse>>(PrepareAsyncGetIpTunnelRaw(context, request, cq));
    }
    // Getting a tunnel by it's ID
    virtual ::grpc::Status GetIpTunnelStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::tunneloffload::v2::IpTunnelStatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::IpTunnelStatsResponse>> AsyncGetIpTunnelStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::IpTunnelStatsResponse>>(AsyncGetIpTunnelStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::IpTunnelStatsResponse>> PrepareAsyncGetIpTunnelStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::IpTunnelStatsResponse>>(PrepareAsyncGetIpTunnelStatsRaw(context, request, cq));
    }
    // Getting all the ipTunnels currently configured
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tunneloffload::v2::IpTunnelResponses>> GetAllIpTunnels(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tunneloffload::v2::IpTunnelResponses>>(GetAllIpTunnelsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tunneloffload::v2::IpTunnelResponses>> AsyncGetAllIpTunnels(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tunneloffload::v2::IpTunnelResponses>>(AsyncGetAllIpTunnelsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tunneloffload::v2::IpTunnelResponses>> PrepareAsyncGetAllIpTunnels(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tunneloffload::v2::IpTunnelResponses>>(PrepareAsyncGetAllIpTunnelsRaw(context, request, cq));
    }
    // Get all the iptunnels stats responses
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tunneloffload::v2::IpTunnelStatsResponses>> GetAllIpTunnelsStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tunneloffload::v2::IpTunnelStatsResponses>>(GetAllIpTunnelsStatsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tunneloffload::v2::IpTunnelStatsResponses>> AsyncGetAllIpTunnelsStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tunneloffload::v2::IpTunnelStatsResponses>>(AsyncGetAllIpTunnelsStatsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tunneloffload::v2::IpTunnelStatsResponses>> PrepareAsyncGetAllIpTunnelsStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tunneloffload::v2::IpTunnelStatsResponses>>(PrepareAsyncGetAllIpTunnelsStatsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Get which capabilities are available while using the
      virtual void Capabilities(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest* request, ::tunneloffload::v2::CapabilityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Capabilities(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest* request, ::tunneloffload::v2::CapabilityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creation of IP Tunnel
      // This API should be generic and allow creations of many IP tunnels
      virtual void CreateIpTunnel(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response, ::grpc::ClientWriteReactor< ::tunneloffload::v2::IpTunnelRequest>* reactor) = 0;
      // Getting a tunnel by it's ID
      virtual void GetIpTunnel(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetIpTunnel(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Getting a tunnel by it's ID
      virtual void GetIpTunnelStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelStatsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetIpTunnelStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Getting all the ipTunnels currently configured
      virtual void GetAllIpTunnels(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs* request, ::grpc::ClientReadReactor< ::tunneloffload::v2::IpTunnelResponses>* reactor) = 0;
      // Get all the iptunnels stats responses
      virtual void GetAllIpTunnelsStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs* request, ::grpc::ClientReadReactor< ::tunneloffload::v2::IpTunnelStatsResponses>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::CapabilityResponse>* AsyncCapabilitiesRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::CapabilityResponse>* PrepareAsyncCapabilitiesRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::tunneloffload::v2::IpTunnelRequest>* CreateIpTunnelRaw(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::tunneloffload::v2::IpTunnelRequest>* AsyncCreateIpTunnelRaw(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::tunneloffload::v2::IpTunnelRequest>* PrepareAsyncCreateIpTunnelRaw(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::IpTunnelResponse>* AsyncGetIpTunnelRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::IpTunnelResponse>* PrepareAsyncGetIpTunnelRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::IpTunnelStatsResponse>* AsyncGetIpTunnelStatsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tunneloffload::v2::IpTunnelStatsResponse>* PrepareAsyncGetIpTunnelStatsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tunneloffload::v2::IpTunnelResponses>* GetAllIpTunnelsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tunneloffload::v2::IpTunnelResponses>* AsyncGetAllIpTunnelsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tunneloffload::v2::IpTunnelResponses>* PrepareAsyncGetAllIpTunnelsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tunneloffload::v2::IpTunnelStatsResponses>* GetAllIpTunnelsStatsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tunneloffload::v2::IpTunnelStatsResponses>* AsyncGetAllIpTunnelsStatsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tunneloffload::v2::IpTunnelStatsResponses>* PrepareAsyncGetAllIpTunnelsStatsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Capabilities(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest& request, ::tunneloffload::v2::CapabilityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::CapabilityResponse>> AsyncCapabilities(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::CapabilityResponse>>(AsyncCapabilitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::CapabilityResponse>> PrepareAsyncCapabilities(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::CapabilityResponse>>(PrepareAsyncCapabilitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::tunneloffload::v2::IpTunnelRequest>> CreateIpTunnel(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::tunneloffload::v2::IpTunnelRequest>>(CreateIpTunnelRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::tunneloffload::v2::IpTunnelRequest>> AsyncCreateIpTunnel(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::tunneloffload::v2::IpTunnelRequest>>(AsyncCreateIpTunnelRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::tunneloffload::v2::IpTunnelRequest>> PrepareAsyncCreateIpTunnel(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::tunneloffload::v2::IpTunnelRequest>>(PrepareAsyncCreateIpTunnelRaw(context, response, cq));
    }
    ::grpc::Status GetIpTunnel(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::tunneloffload::v2::IpTunnelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelResponse>> AsyncGetIpTunnel(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelResponse>>(AsyncGetIpTunnelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelResponse>> PrepareAsyncGetIpTunnel(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelResponse>>(PrepareAsyncGetIpTunnelRaw(context, request, cq));
    }
    ::grpc::Status GetIpTunnelStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::tunneloffload::v2::IpTunnelStatsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelStatsResponse>> AsyncGetIpTunnelStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelStatsResponse>>(AsyncGetIpTunnelStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelStatsResponse>> PrepareAsyncGetIpTunnelStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelStatsResponse>>(PrepareAsyncGetIpTunnelStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tunneloffload::v2::IpTunnelResponses>> GetAllIpTunnels(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tunneloffload::v2::IpTunnelResponses>>(GetAllIpTunnelsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelResponses>> AsyncGetAllIpTunnels(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelResponses>>(AsyncGetAllIpTunnelsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelResponses>> PrepareAsyncGetAllIpTunnels(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelResponses>>(PrepareAsyncGetAllIpTunnelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tunneloffload::v2::IpTunnelStatsResponses>> GetAllIpTunnelsStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tunneloffload::v2::IpTunnelStatsResponses>>(GetAllIpTunnelsStatsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelStatsResponses>> AsyncGetAllIpTunnelsStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelStatsResponses>>(AsyncGetAllIpTunnelsStatsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelStatsResponses>> PrepareAsyncGetAllIpTunnelsStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelStatsResponses>>(PrepareAsyncGetAllIpTunnelsStatsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Capabilities(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest* request, ::tunneloffload::v2::CapabilityResponse* response, std::function<void(::grpc::Status)>) override;
      void Capabilities(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest* request, ::tunneloffload::v2::CapabilityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateIpTunnel(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response, ::grpc::ClientWriteReactor< ::tunneloffload::v2::IpTunnelRequest>* reactor) override;
      void GetIpTunnel(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelResponse* response, std::function<void(::grpc::Status)>) override;
      void GetIpTunnel(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetIpTunnelStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelStatsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetIpTunnelStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllIpTunnels(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs* request, ::grpc::ClientReadReactor< ::tunneloffload::v2::IpTunnelResponses>* reactor) override;
      void GetAllIpTunnelsStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs* request, ::grpc::ClientReadReactor< ::tunneloffload::v2::IpTunnelStatsResponses>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::CapabilityResponse>* AsyncCapabilitiesRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::CapabilityResponse>* PrepareAsyncCapabilitiesRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::tunneloffload::v2::IpTunnelRequest>* CreateIpTunnelRaw(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response) override;
    ::grpc::ClientAsyncWriter< ::tunneloffload::v2::IpTunnelRequest>* AsyncCreateIpTunnelRaw(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::tunneloffload::v2::IpTunnelRequest>* PrepareAsyncCreateIpTunnelRaw(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelResponse>* AsyncGetIpTunnelRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelResponse>* PrepareAsyncGetIpTunnelRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelStatsResponse>* AsyncGetIpTunnelStatsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelStatsResponse>* PrepareAsyncGetIpTunnelStatsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tunneloffload::v2::IpTunnelResponses>* GetAllIpTunnelsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request) override;
    ::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelResponses>* AsyncGetAllIpTunnelsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelResponses>* PrepareAsyncGetAllIpTunnelsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tunneloffload::v2::IpTunnelStatsResponses>* GetAllIpTunnelsStatsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request) override;
    ::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelStatsResponses>* AsyncGetAllIpTunnelsStatsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelStatsResponses>* PrepareAsyncGetAllIpTunnelsStatsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Capabilities_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateIpTunnel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIpTunnel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIpTunnelStats_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllIpTunnels_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllIpTunnelsStats_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get which capabilities are available while using the
    virtual ::grpc::Status Capabilities(::grpc::ServerContext* context, const ::tunneloffload::v2::CapabilityRequest* request, ::tunneloffload::v2::CapabilityResponse* response);
    // Creation of IP Tunnel
    // This API should be generic and allow creations of many IP tunnels
    virtual ::grpc::Status CreateIpTunnel(::grpc::ServerContext* context, ::grpc::ServerReader< ::tunneloffload::v2::IpTunnelRequest>* reader, ::tunneloffload::v2::CreateIpTunnelResponses* response);
    // Getting a tunnel by it's ID
    virtual ::grpc::Status GetIpTunnel(::grpc::ServerContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelResponse* response);
    // Getting a tunnel by it's ID
    virtual ::grpc::Status GetIpTunnelStats(::grpc::ServerContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelStatsResponse* response);
    // Getting all the ipTunnels currently configured
    virtual ::grpc::Status GetAllIpTunnels(::grpc::ServerContext* context, const ::tunneloffload::v2::TunnelRequestArgs* request, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelResponses>* writer);
    // Get all the iptunnels stats responses
    virtual ::grpc::Status GetAllIpTunnelsStats(::grpc::ServerContext* context, const ::tunneloffload::v2::TunnelRequestArgs* request, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelStatsResponses>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Capabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Capabilities() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Capabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capabilities(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::CapabilityRequest* /*request*/, ::tunneloffload::v2::CapabilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCapabilities(::grpc::ServerContext* context, ::tunneloffload::v2::CapabilityRequest* request, ::grpc::ServerAsyncResponseWriter< ::tunneloffload::v2::CapabilityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateIpTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateIpTunnel() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateIpTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIpTunnel(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::tunneloffload::v2::IpTunnelRequest>* /*reader*/, ::tunneloffload::v2::CreateIpTunnelResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateIpTunnel(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::tunneloffload::v2::CreateIpTunnelResponses, ::tunneloffload::v2::IpTunnelRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIpTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIpTunnel() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetIpTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIpTunnel(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelId* /*request*/, ::tunneloffload::v2::IpTunnelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIpTunnel(::grpc::ServerContext* context, ::tunneloffload::v2::TunnelId* request, ::grpc::ServerAsyncResponseWriter< ::tunneloffload::v2::IpTunnelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIpTunnelStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIpTunnelStats() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetIpTunnelStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIpTunnelStats(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelId* /*request*/, ::tunneloffload::v2::IpTunnelStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIpTunnelStats(::grpc::ServerContext* context, ::tunneloffload::v2::TunnelId* request, ::grpc::ServerAsyncResponseWriter< ::tunneloffload::v2::IpTunnelStatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllIpTunnels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllIpTunnels() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetAllIpTunnels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllIpTunnels(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelRequestArgs* /*request*/, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelResponses>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllIpTunnels(::grpc::ServerContext* context, ::tunneloffload::v2::TunnelRequestArgs* request, ::grpc::ServerAsyncWriter< ::tunneloffload::v2::IpTunnelResponses>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllIpTunnelsStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllIpTunnelsStats() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetAllIpTunnelsStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllIpTunnelsStats(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelRequestArgs* /*request*/, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelStatsResponses>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllIpTunnelsStats(::grpc::ServerContext* context, ::tunneloffload::v2::TunnelRequestArgs* request, ::grpc::ServerAsyncWriter< ::tunneloffload::v2::IpTunnelStatsResponses>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Capabilities<WithAsyncMethod_CreateIpTunnel<WithAsyncMethod_GetIpTunnel<WithAsyncMethod_GetIpTunnelStats<WithAsyncMethod_GetAllIpTunnels<WithAsyncMethod_GetAllIpTunnelsStats<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Capabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Capabilities() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::tunneloffload::v2::CapabilityRequest, ::tunneloffload::v2::CapabilityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tunneloffload::v2::CapabilityRequest* request, ::tunneloffload::v2::CapabilityResponse* response) { return this->Capabilities(context, request, response); }));}
    void SetMessageAllocatorFor_Capabilities(
        ::grpc::MessageAllocator< ::tunneloffload::v2::CapabilityRequest, ::tunneloffload::v2::CapabilityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tunneloffload::v2::CapabilityRequest, ::tunneloffload::v2::CapabilityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Capabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capabilities(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::CapabilityRequest* /*request*/, ::tunneloffload::v2::CapabilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Capabilities(
      ::grpc::CallbackServerContext* /*context*/, const ::tunneloffload::v2::CapabilityRequest* /*request*/, ::tunneloffload::v2::CapabilityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateIpTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateIpTunnel() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::tunneloffload::v2::IpTunnelRequest, ::tunneloffload::v2::CreateIpTunnelResponses>(
            [this](
                   ::grpc::CallbackServerContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response) { return this->CreateIpTunnel(context, response); }));
    }
    ~WithCallbackMethod_CreateIpTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIpTunnel(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::tunneloffload::v2::IpTunnelRequest>* /*reader*/, ::tunneloffload::v2::CreateIpTunnelResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::tunneloffload::v2::IpTunnelRequest>* CreateIpTunnel(
      ::grpc::CallbackServerContext* /*context*/, ::tunneloffload::v2::CreateIpTunnelResponses* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetIpTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetIpTunnel() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelResponse* response) { return this->GetIpTunnel(context, request, response); }));}
    void SetMessageAllocatorFor_GetIpTunnel(
        ::grpc::MessageAllocator< ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetIpTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIpTunnel(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelId* /*request*/, ::tunneloffload::v2::IpTunnelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIpTunnel(
      ::grpc::CallbackServerContext* /*context*/, const ::tunneloffload::v2::TunnelId* /*request*/, ::tunneloffload::v2::IpTunnelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetIpTunnelStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetIpTunnelStats() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelStatsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelStatsResponse* response) { return this->GetIpTunnelStats(context, request, response); }));}
    void SetMessageAllocatorFor_GetIpTunnelStats(
        ::grpc::MessageAllocator< ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelStatsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelStatsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetIpTunnelStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIpTunnelStats(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelId* /*request*/, ::tunneloffload::v2::IpTunnelStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIpTunnelStats(
      ::grpc::CallbackServerContext* /*context*/, const ::tunneloffload::v2::TunnelId* /*request*/, ::tunneloffload::v2::IpTunnelStatsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllIpTunnels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllIpTunnels() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::tunneloffload::v2::TunnelRequestArgs, ::tunneloffload::v2::IpTunnelResponses>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tunneloffload::v2::TunnelRequestArgs* request) { return this->GetAllIpTunnels(context, request); }));
    }
    ~WithCallbackMethod_GetAllIpTunnels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllIpTunnels(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelRequestArgs* /*request*/, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelResponses>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::tunneloffload::v2::IpTunnelResponses>* GetAllIpTunnels(
      ::grpc::CallbackServerContext* /*context*/, const ::tunneloffload::v2::TunnelRequestArgs* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllIpTunnelsStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllIpTunnelsStats() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::tunneloffload::v2::TunnelRequestArgs, ::tunneloffload::v2::IpTunnelStatsResponses>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tunneloffload::v2::TunnelRequestArgs* request) { return this->GetAllIpTunnelsStats(context, request); }));
    }
    ~WithCallbackMethod_GetAllIpTunnelsStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllIpTunnelsStats(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelRequestArgs* /*request*/, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelStatsResponses>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::tunneloffload::v2::IpTunnelStatsResponses>* GetAllIpTunnelsStats(
      ::grpc::CallbackServerContext* /*context*/, const ::tunneloffload::v2::TunnelRequestArgs* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Capabilities<WithCallbackMethod_CreateIpTunnel<WithCallbackMethod_GetIpTunnel<WithCallbackMethod_GetIpTunnelStats<WithCallbackMethod_GetAllIpTunnels<WithCallbackMethod_GetAllIpTunnelsStats<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Capabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Capabilities() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Capabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capabilities(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::CapabilityRequest* /*request*/, ::tunneloffload::v2::CapabilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateIpTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateIpTunnel() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateIpTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIpTunnel(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::tunneloffload::v2::IpTunnelRequest>* /*reader*/, ::tunneloffload::v2::CreateIpTunnelResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIpTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIpTunnel() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetIpTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIpTunnel(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelId* /*request*/, ::tunneloffload::v2::IpTunnelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIpTunnelStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIpTunnelStats() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetIpTunnelStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIpTunnelStats(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelId* /*request*/, ::tunneloffload::v2::IpTunnelStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllIpTunnels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllIpTunnels() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetAllIpTunnels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllIpTunnels(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelRequestArgs* /*request*/, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelResponses>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllIpTunnelsStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllIpTunnelsStats() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetAllIpTunnelsStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllIpTunnelsStats(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelRequestArgs* /*request*/, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelStatsResponses>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Capabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Capabilities() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Capabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capabilities(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::CapabilityRequest* /*request*/, ::tunneloffload::v2::CapabilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCapabilities(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateIpTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateIpTunnel() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateIpTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIpTunnel(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::tunneloffload::v2::IpTunnelRequest>* /*reader*/, ::tunneloffload::v2::CreateIpTunnelResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateIpTunnel(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIpTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIpTunnel() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetIpTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIpTunnel(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelId* /*request*/, ::tunneloffload::v2::IpTunnelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIpTunnel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIpTunnelStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIpTunnelStats() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetIpTunnelStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIpTunnelStats(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelId* /*request*/, ::tunneloffload::v2::IpTunnelStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIpTunnelStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllIpTunnels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllIpTunnels() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetAllIpTunnels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllIpTunnels(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelRequestArgs* /*request*/, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelResponses>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllIpTunnels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllIpTunnelsStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllIpTunnelsStats() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetAllIpTunnelsStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllIpTunnelsStats(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelRequestArgs* /*request*/, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelStatsResponses>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllIpTunnelsStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Capabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Capabilities() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Capabilities(context, request, response); }));
    }
    ~WithRawCallbackMethod_Capabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capabilities(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::CapabilityRequest* /*request*/, ::tunneloffload::v2::CapabilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Capabilities(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateIpTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateIpTunnel() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->CreateIpTunnel(context, response); }));
    }
    ~WithRawCallbackMethod_CreateIpTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIpTunnel(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::tunneloffload::v2::IpTunnelRequest>* /*reader*/, ::tunneloffload::v2::CreateIpTunnelResponses* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* CreateIpTunnel(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetIpTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetIpTunnel() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetIpTunnel(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetIpTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIpTunnel(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelId* /*request*/, ::tunneloffload::v2::IpTunnelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIpTunnel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetIpTunnelStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetIpTunnelStats() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetIpTunnelStats(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetIpTunnelStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIpTunnelStats(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelId* /*request*/, ::tunneloffload::v2::IpTunnelStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIpTunnelStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllIpTunnels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllIpTunnels() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetAllIpTunnels(context, request); }));
    }
    ~WithRawCallbackMethod_GetAllIpTunnels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllIpTunnels(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelRequestArgs* /*request*/, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelResponses>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetAllIpTunnels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllIpTunnelsStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllIpTunnelsStats() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetAllIpTunnelsStats(context, request); }));
    }
    ~WithRawCallbackMethod_GetAllIpTunnelsStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllIpTunnelsStats(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelRequestArgs* /*request*/, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelStatsResponses>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetAllIpTunnelsStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Capabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Capabilities() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tunneloffload::v2::CapabilityRequest, ::tunneloffload::v2::CapabilityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tunneloffload::v2::CapabilityRequest, ::tunneloffload::v2::CapabilityResponse>* streamer) {
                       return this->StreamedCapabilities(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Capabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Capabilities(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::CapabilityRequest* /*request*/, ::tunneloffload::v2::CapabilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCapabilities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tunneloffload::v2::CapabilityRequest,::tunneloffload::v2::CapabilityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIpTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetIpTunnel() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelResponse>* streamer) {
                       return this->StreamedGetIpTunnel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetIpTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIpTunnel(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelId* /*request*/, ::tunneloffload::v2::IpTunnelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIpTunnel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tunneloffload::v2::TunnelId,::tunneloffload::v2::IpTunnelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIpTunnelStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetIpTunnelStats() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelStatsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelStatsResponse>* streamer) {
                       return this->StreamedGetIpTunnelStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetIpTunnelStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIpTunnelStats(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelId* /*request*/, ::tunneloffload::v2::IpTunnelStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIpTunnelStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tunneloffload::v2::TunnelId,::tunneloffload::v2::IpTunnelStatsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Capabilities<WithStreamedUnaryMethod_GetIpTunnel<WithStreamedUnaryMethod_GetIpTunnelStats<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetAllIpTunnels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetAllIpTunnels() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::tunneloffload::v2::TunnelRequestArgs, ::tunneloffload::v2::IpTunnelResponses>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::tunneloffload::v2::TunnelRequestArgs, ::tunneloffload::v2::IpTunnelResponses>* streamer) {
                       return this->StreamedGetAllIpTunnels(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetAllIpTunnels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllIpTunnels(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelRequestArgs* /*request*/, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelResponses>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetAllIpTunnels(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tunneloffload::v2::TunnelRequestArgs,::tunneloffload::v2::IpTunnelResponses>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetAllIpTunnelsStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetAllIpTunnelsStats() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::tunneloffload::v2::TunnelRequestArgs, ::tunneloffload::v2::IpTunnelStatsResponses>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::tunneloffload::v2::TunnelRequestArgs, ::tunneloffload::v2::IpTunnelStatsResponses>* streamer) {
                       return this->StreamedGetAllIpTunnelsStats(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetAllIpTunnelsStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllIpTunnelsStats(::grpc::ServerContext* /*context*/, const ::tunneloffload::v2::TunnelRequestArgs* /*request*/, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelStatsResponses>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetAllIpTunnelsStats(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tunneloffload::v2::TunnelRequestArgs,::tunneloffload::v2::IpTunnelStatsResponses>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetAllIpTunnels<WithSplitStreamingMethod_GetAllIpTunnelsStats<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Capabilities<WithStreamedUnaryMethod_GetIpTunnel<WithStreamedUnaryMethod_GetIpTunnelStats<WithSplitStreamingMethod_GetAllIpTunnels<WithSplitStreamingMethod_GetAllIpTunnelsStats<Service > > > > > StreamedService;
};

}  // namespace v2
}  // namespace tunneloffload


#endif  // GRPC_tunneloffload_2eproto__INCLUDED
