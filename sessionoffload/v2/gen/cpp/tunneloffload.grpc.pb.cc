// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tunneloffload.proto

#include "tunneloffload.pb.h"
#include "tunneloffload.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tunneloffload {
namespace v2 {

static const char* IpTunnelService_method_names[] = {
  "/tunneloffload.v2.IpTunnelService/Capabilities",
  "/tunneloffload.v2.IpTunnelService/CreateIpTunnel",
  "/tunneloffload.v2.IpTunnelService/GetIpTunnel",
  "/tunneloffload.v2.IpTunnelService/GetIpTunnelStats",
  "/tunneloffload.v2.IpTunnelService/GetAllIpTunnels",
  "/tunneloffload.v2.IpTunnelService/GetAllIpTunnelsStats",
};

std::unique_ptr< IpTunnelService::Stub> IpTunnelService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IpTunnelService::Stub> stub(new IpTunnelService::Stub(channel, options));
  return stub;
}

IpTunnelService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Capabilities_(IpTunnelService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateIpTunnel_(IpTunnelService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetIpTunnel_(IpTunnelService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIpTunnelStats_(IpTunnelService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllIpTunnels_(IpTunnelService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetAllIpTunnelsStats_(IpTunnelService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status IpTunnelService::Stub::Capabilities(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest& request, ::tunneloffload::v2::CapabilityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tunneloffload::v2::CapabilityRequest, ::tunneloffload::v2::CapabilityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Capabilities_, context, request, response);
}

void IpTunnelService::Stub::async::Capabilities(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest* request, ::tunneloffload::v2::CapabilityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tunneloffload::v2::CapabilityRequest, ::tunneloffload::v2::CapabilityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Capabilities_, context, request, response, std::move(f));
}

void IpTunnelService::Stub::async::Capabilities(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest* request, ::tunneloffload::v2::CapabilityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Capabilities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::CapabilityResponse>* IpTunnelService::Stub::PrepareAsyncCapabilitiesRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tunneloffload::v2::CapabilityResponse, ::tunneloffload::v2::CapabilityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Capabilities_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::CapabilityResponse>* IpTunnelService::Stub::AsyncCapabilitiesRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::CapabilityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCapabilitiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::tunneloffload::v2::IpTunnelRequest>* IpTunnelService::Stub::CreateIpTunnelRaw(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response) {
  return ::grpc::internal::ClientWriterFactory< ::tunneloffload::v2::IpTunnelRequest>::Create(channel_.get(), rpcmethod_CreateIpTunnel_, context, response);
}

void IpTunnelService::Stub::async::CreateIpTunnel(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response, ::grpc::ClientWriteReactor< ::tunneloffload::v2::IpTunnelRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::tunneloffload::v2::IpTunnelRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_CreateIpTunnel_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::tunneloffload::v2::IpTunnelRequest>* IpTunnelService::Stub::AsyncCreateIpTunnelRaw(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::tunneloffload::v2::IpTunnelRequest>::Create(channel_.get(), cq, rpcmethod_CreateIpTunnel_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::tunneloffload::v2::IpTunnelRequest>* IpTunnelService::Stub::PrepareAsyncCreateIpTunnelRaw(::grpc::ClientContext* context, ::tunneloffload::v2::CreateIpTunnelResponses* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::tunneloffload::v2::IpTunnelRequest>::Create(channel_.get(), cq, rpcmethod_CreateIpTunnel_, context, response, false, nullptr);
}

::grpc::Status IpTunnelService::Stub::GetIpTunnel(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::tunneloffload::v2::IpTunnelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIpTunnel_, context, request, response);
}

void IpTunnelService::Stub::async::GetIpTunnel(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIpTunnel_, context, request, response, std::move(f));
}

void IpTunnelService::Stub::async::GetIpTunnel(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIpTunnel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelResponse>* IpTunnelService::Stub::PrepareAsyncGetIpTunnelRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tunneloffload::v2::IpTunnelResponse, ::tunneloffload::v2::TunnelId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIpTunnel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelResponse>* IpTunnelService::Stub::AsyncGetIpTunnelRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIpTunnelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IpTunnelService::Stub::GetIpTunnelStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::tunneloffload::v2::IpTunnelStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIpTunnelStats_, context, request, response);
}

void IpTunnelService::Stub::async::GetIpTunnelStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIpTunnelStats_, context, request, response, std::move(f));
}

void IpTunnelService::Stub::async::GetIpTunnelStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIpTunnelStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelStatsResponse>* IpTunnelService::Stub::PrepareAsyncGetIpTunnelStatsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tunneloffload::v2::IpTunnelStatsResponse, ::tunneloffload::v2::TunnelId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIpTunnelStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tunneloffload::v2::IpTunnelStatsResponse>* IpTunnelService::Stub::AsyncGetIpTunnelStatsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIpTunnelStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::tunneloffload::v2::IpTunnelResponses>* IpTunnelService::Stub::GetAllIpTunnelsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request) {
  return ::grpc::internal::ClientReaderFactory< ::tunneloffload::v2::IpTunnelResponses>::Create(channel_.get(), rpcmethod_GetAllIpTunnels_, context, request);
}

void IpTunnelService::Stub::async::GetAllIpTunnels(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs* request, ::grpc::ClientReadReactor< ::tunneloffload::v2::IpTunnelResponses>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::tunneloffload::v2::IpTunnelResponses>::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllIpTunnels_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelResponses>* IpTunnelService::Stub::AsyncGetAllIpTunnelsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tunneloffload::v2::IpTunnelResponses>::Create(channel_.get(), cq, rpcmethod_GetAllIpTunnels_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelResponses>* IpTunnelService::Stub::PrepareAsyncGetAllIpTunnelsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tunneloffload::v2::IpTunnelResponses>::Create(channel_.get(), cq, rpcmethod_GetAllIpTunnels_, context, request, false, nullptr);
}

::grpc::ClientReader< ::tunneloffload::v2::IpTunnelStatsResponses>* IpTunnelService::Stub::GetAllIpTunnelsStatsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request) {
  return ::grpc::internal::ClientReaderFactory< ::tunneloffload::v2::IpTunnelStatsResponses>::Create(channel_.get(), rpcmethod_GetAllIpTunnelsStats_, context, request);
}

void IpTunnelService::Stub::async::GetAllIpTunnelsStats(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs* request, ::grpc::ClientReadReactor< ::tunneloffload::v2::IpTunnelStatsResponses>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::tunneloffload::v2::IpTunnelStatsResponses>::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllIpTunnelsStats_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelStatsResponses>* IpTunnelService::Stub::AsyncGetAllIpTunnelsStatsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tunneloffload::v2::IpTunnelStatsResponses>::Create(channel_.get(), cq, rpcmethod_GetAllIpTunnelsStats_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::tunneloffload::v2::IpTunnelStatsResponses>* IpTunnelService::Stub::PrepareAsyncGetAllIpTunnelsStatsRaw(::grpc::ClientContext* context, const ::tunneloffload::v2::TunnelRequestArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tunneloffload::v2::IpTunnelStatsResponses>::Create(channel_.get(), cq, rpcmethod_GetAllIpTunnelsStats_, context, request, false, nullptr);
}

IpTunnelService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpTunnelService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IpTunnelService::Service, ::tunneloffload::v2::CapabilityRequest, ::tunneloffload::v2::CapabilityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IpTunnelService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tunneloffload::v2::CapabilityRequest* req,
             ::tunneloffload::v2::CapabilityResponse* resp) {
               return service->Capabilities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpTunnelService_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< IpTunnelService::Service, ::tunneloffload::v2::IpTunnelRequest, ::tunneloffload::v2::CreateIpTunnelResponses>(
          [](IpTunnelService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::tunneloffload::v2::IpTunnelRequest>* reader,
             ::tunneloffload::v2::CreateIpTunnelResponses* resp) {
               return service->CreateIpTunnel(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpTunnelService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IpTunnelService::Service, ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IpTunnelService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tunneloffload::v2::TunnelId* req,
             ::tunneloffload::v2::IpTunnelResponse* resp) {
               return service->GetIpTunnel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpTunnelService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IpTunnelService::Service, ::tunneloffload::v2::TunnelId, ::tunneloffload::v2::IpTunnelStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IpTunnelService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tunneloffload::v2::TunnelId* req,
             ::tunneloffload::v2::IpTunnelStatsResponse* resp) {
               return service->GetIpTunnelStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpTunnelService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< IpTunnelService::Service, ::tunneloffload::v2::TunnelRequestArgs, ::tunneloffload::v2::IpTunnelResponses>(
          [](IpTunnelService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tunneloffload::v2::TunnelRequestArgs* req,
             ::grpc::ServerWriter<::tunneloffload::v2::IpTunnelResponses>* writer) {
               return service->GetAllIpTunnels(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IpTunnelService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< IpTunnelService::Service, ::tunneloffload::v2::TunnelRequestArgs, ::tunneloffload::v2::IpTunnelStatsResponses>(
          [](IpTunnelService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tunneloffload::v2::TunnelRequestArgs* req,
             ::grpc::ServerWriter<::tunneloffload::v2::IpTunnelStatsResponses>* writer) {
               return service->GetAllIpTunnelsStats(ctx, req, writer);
             }, this)));
}

IpTunnelService::Service::~Service() {
}

::grpc::Status IpTunnelService::Service::Capabilities(::grpc::ServerContext* context, const ::tunneloffload::v2::CapabilityRequest* request, ::tunneloffload::v2::CapabilityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IpTunnelService::Service::CreateIpTunnel(::grpc::ServerContext* context, ::grpc::ServerReader< ::tunneloffload::v2::IpTunnelRequest>* reader, ::tunneloffload::v2::CreateIpTunnelResponses* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IpTunnelService::Service::GetIpTunnel(::grpc::ServerContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IpTunnelService::Service::GetIpTunnelStats(::grpc::ServerContext* context, const ::tunneloffload::v2::TunnelId* request, ::tunneloffload::v2::IpTunnelStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IpTunnelService::Service::GetAllIpTunnels(::grpc::ServerContext* context, const ::tunneloffload::v2::TunnelRequestArgs* request, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelResponses>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IpTunnelService::Service::GetAllIpTunnelsStats(::grpc::ServerContext* context, const ::tunneloffload::v2::TunnelRequestArgs* request, ::grpc::ServerWriter< ::tunneloffload::v2::IpTunnelStatsResponses>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tunneloffload
}  // namespace v2

