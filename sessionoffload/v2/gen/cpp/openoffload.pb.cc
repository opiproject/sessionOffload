// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openoffload.proto

#include "openoffload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace openoffload {
namespace v2 {
constexpr Uuid::Uuid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UuidDefaultTypeInternal {
  constexpr UuidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UuidDefaultTypeInternal() {}
  union {
    Uuid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UuidDefaultTypeInternal _Uuid_default_instance_;
constexpr SessionId::SessionId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u}){}
struct SessionIdDefaultTypeInternal {
  constexpr SessionIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionIdDefaultTypeInternal() {}
  union {
    SessionId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionIdDefaultTypeInternal _SessionId_default_instance_;
constexpr ActionParameters::ActionParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_next_hop_v6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_type_(0)

  , action_next_hop_(0u){}
struct ActionParametersDefaultTypeInternal {
  constexpr ActionParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionParametersDefaultTypeInternal() {}
  union {
    ActionParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionParametersDefaultTypeInternal _ActionParameters_default_instance_;
constexpr SessionRequest::SessionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_ipv6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , destination_ipv6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(nullptr)
  , session_id_(uint64_t{0u})
  , in_lif_(0)
  , out_lif_(0)
  , ip_version_(0)

  , source_ip_(0u)
  , source_port_(0u)
  , destination_ip_(0u)
  , destination_port_(0u)
  , protocol_id_(0)

  , cache_timeout_(0u){}
struct SessionRequestDefaultTypeInternal {
  constexpr SessionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionRequestDefaultTypeInternal() {}
  union {
    SessionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionRequestDefaultTypeInternal _SessionRequest_default_instance_;
constexpr SessionResponseError::SessionResponseError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u})
  , error_status_(0){}
struct SessionResponseErrorDefaultTypeInternal {
  constexpr SessionResponseErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionResponseErrorDefaultTypeInternal() {}
  union {
    SessionResponseError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionResponseErrorDefaultTypeInternal _SessionResponseError_default_instance_;
constexpr SessionResponses::SessionResponses(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_info_()
  , next_key_(uint64_t{0u}){}
struct SessionResponsesDefaultTypeInternal {
  constexpr SessionResponsesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionResponsesDefaultTypeInternal() {}
  union {
    SessionResponses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionResponsesDefaultTypeInternal _SessionResponses_default_instance_;
constexpr AddSessionResponse::AddSessionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_error_()
  , start_time_(nullptr)
  , error_status_(uint64_t{0u})
  , request_status_(0)
{}
struct AddSessionResponseDefaultTypeInternal {
  constexpr AddSessionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddSessionResponseDefaultTypeInternal() {}
  union {
    AddSessionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddSessionResponseDefaultTypeInternal _AddSessionResponse_default_instance_;
constexpr SessionResponse::SessionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_time_(nullptr)
  , end_time_(nullptr)
  , session_id_(uint64_t{0u})
  , in_packets_(uint64_t{0u})
  , out_packets_(uint64_t{0u})
  , in_bytes_(uint64_t{0u})
  , out_bytes_(uint64_t{0u})
  , session_state_(0)

  , session_close_code_(0)

  , request_status_(0)
{}
struct SessionResponseDefaultTypeInternal {
  constexpr SessionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionResponseDefaultTypeInternal() {}
  union {
    SessionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionResponseDefaultTypeInternal _SessionResponse_default_instance_;
constexpr SessionRequestArgs::SessionRequestArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_size_(0u)
  , page_(0u)
  , start_session_(uint64_t{0u}){}
struct SessionRequestArgsDefaultTypeInternal {
  constexpr SessionRequestArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionRequestArgsDefaultTypeInternal() {}
  union {
    SessionRequestArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionRequestArgsDefaultTypeInternal _SessionRequestArgs_default_instance_;
}  // namespace v2
}  // namespace openoffload
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openoffload_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_openoffload_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openoffload_2eproto = nullptr;

const uint32_t TableStruct_openoffload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::Uuid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::Uuid, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionId, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::ActionParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::ActionParameters, action_type_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::ActionParameters, action_next_hop_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::ActionParameters, action_next_hop_v6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequest, in_lif_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequest, out_lif_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequest, ip_version_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequest, source_ip_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequest, source_ipv6_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequest, source_port_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequest, destination_ip_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequest, destination_ipv6_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequest, destination_port_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequest, protocol_id_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequest, action_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequest, cache_timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponseError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponseError, session_id_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponseError, error_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponses, session_info_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponses, next_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::AddSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::AddSessionResponse, request_status_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::AddSessionResponse, error_status_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::AddSessionResponse, start_time_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::AddSessionResponse, response_error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponse, session_id_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponse, in_packets_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponse, out_packets_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponse, in_bytes_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponse, out_bytes_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponse, session_state_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponse, session_close_code_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponse, request_status_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponse, start_time_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionResponse, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequestArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequestArgs, page_size_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequestArgs, page_),
  PROTOBUF_FIELD_OFFSET(::openoffload::v2::SessionRequestArgs, start_session_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::openoffload::v2::Uuid)},
  { 7, -1, -1, sizeof(::openoffload::v2::SessionId)},
  { 14, -1, -1, sizeof(::openoffload::v2::ActionParameters)},
  { 23, -1, -1, sizeof(::openoffload::v2::SessionRequest)},
  { 42, -1, -1, sizeof(::openoffload::v2::SessionResponseError)},
  { 50, -1, -1, sizeof(::openoffload::v2::SessionResponses)},
  { 58, -1, -1, sizeof(::openoffload::v2::AddSessionResponse)},
  { 68, -1, -1, sizeof(::openoffload::v2::SessionResponse)},
  { 84, -1, -1, sizeof(::openoffload::v2::SessionRequestArgs)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v2::_Uuid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v2::_SessionId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v2::_ActionParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v2::_SessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v2::_SessionResponseError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v2::_SessionResponses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v2::_AddSessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v2::_SessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openoffload::v2::_SessionRequestArgs_default_instance_),
};

const char descriptor_table_protodef_openoffload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021openoffload.proto\022\016openoffload.v2\032\037goo"
  "gle/protobuf/timestamp.proto\"\025\n\004Uuid\022\r\n\005"
  "value\030\001 \001(\t\"\037\n\tSessionId\022\022\n\nsession_id\030\001"
  " \001(\004\"x\n\020ActionParameters\022/\n\013action_type\030"
  "\001 \001(\0162\032.openoffload.v2.ActionType\022\027\n\017act"
  "ion_next_hop\030\002 \001(\r\022\032\n\022action_next_hop_v6"
  "\030\003 \001(\014\"\367\002\n\016SessionRequest\022\022\n\nsession_id\030"
  "\001 \001(\004\022\016\n\006in_lif\030\002 \001(\005\022\017\n\007out_lif\030\003 \001(\005\022-"
  "\n\nip_version\030\004 \001(\0162\031.openoffload.v2.IpVe"
  "rsion\022\021\n\tsource_ip\030\005 \001(\r\022\023\n\013source_ipv6\030"
  "\006 \001(\014\022\023\n\013source_port\030\007 \001(\r\022\026\n\016destinatio"
  "n_ip\030\010 \001(\r\022\030\n\020destination_ipv6\030\t \001(\014\022\030\n\020"
  "destination_port\030\n \001(\r\022/\n\013protocol_id\030\013 "
  "\001(\0162\032.openoffload.v2.ProtocolId\0220\n\006actio"
  "n\030\014 \001(\0132 .openoffload.v2.ActionParameter"
  "s\022\025\n\rcache_timeout\030\r \001(\r\"@\n\024SessionRespo"
  "nseError\022\022\n\nsession_id\030\001 \001(\004\022\024\n\014error_st"
  "atus\030\002 \001(\005\"[\n\020SessionResponses\0225\n\014sessio"
  "n_info\030\001 \003(\0132\037.openoffload.v2.SessionRes"
  "ponse\022\020\n\010next_key\030\002 \001(\004\"\322\001\n\022AddSessionRe"
  "sponse\0228\n\016request_status\030\001 \001(\0162 .openoff"
  "load.v2.AddSessionStatus\022\024\n\014error_status"
  "\030\002 \001(\004\022.\n\nstart_time\030\003 \001(\0132\032.google.prot"
  "obuf.Timestamp\022<\n\016response_error\030\004 \003(\0132$"
  ".openoffload.v2.SessionResponseError\"\373\002\n"
  "\017SessionResponse\022\022\n\nsession_id\030\001 \001(\004\022\022\n\n"
  "in_packets\030\002 \001(\004\022\023\n\013out_packets\030\003 \001(\004\022\020\n"
  "\010in_bytes\030\004 \001(\004\022\021\n\tout_bytes\030\005 \001(\004\0223\n\rse"
  "ssion_state\030\006 \001(\0162\034.openoffload.v2.Sessi"
  "onState\022<\n\022session_close_code\030\007 \001(\0162 .op"
  "enoffload.v2.SessionCloseCode\0225\n\016request"
  "_status\030\010 \001(\0162\035.openoffload.v2.RequestSt"
  "atus\022.\n\nstart_time\030\t \001(\0132\032.google.protob"
  "uf.Timestamp\022,\n\010end_time\030\n \001(\0132\032.google."
  "protobuf.Timestamp\"L\n\022SessionRequestArgs"
  "\022\021\n\tpage_size\030\001 \001(\r\022\014\n\004page\030\002 \001(\r\022\025\n\rsta"
  "rt_session\030\003 \001(\004*!\n\tIpVersion\022\t\n\005_IPV4\020\000"
  "\022\t\n\005_IPV6\020\001*@\n\nProtocolId\022\013\n\007_HOPOPT\020\000\022\010"
  "\n\004_TCP\020\006\022\010\n\004_UDP\020\021\"\004\010\001\020\005\"\004\010\007\020\020\"\005\010\022\020\377\001*a\n"
  "\014SessionState\022\020\n\014_ESTABLISHED\020\000\022\016\n\n_CLOS"
  "ING_1\020\001\022\016\n\n_CLOSING_2\020\002\022\013\n\007_CLOSED\020\003\022\022\n\016"
  "_UNKNOWN_STATE\020\004*a\n\020SessionCloseCode\022\017\n\013"
  "_NOT_CLOSED\020\000\022\013\n\007_FINACK\020\001\022\010\n\004_RST\020\002\022\014\n\010"
  "_TIMEOUT\020\003\022\027\n\023_UNKNOWN_CLOSE_CODE\020\004*\226\001\n\020"
  "AddSessionStatus\022\025\n\021_SESSION_ACCEPTED\020\000\022"
  "\025\n\021_SESSION_REJECTED\020\001\022\027\n\023_SESSION_TABLE"
  "_FULL\020\002\022\036\n\032_SESSION_TABLE_UNAVAILABLE\020\003\022"
  "\033\n\027_SESSION_ALREADY_EXISTS\020\004*\317\001\n\rRequest"
  "Status\022\r\n\t_ACCEPTED\020\000\022\r\n\t_REJECTED\020\001\022!\n\035"
  "_REJECTED_SESSION_NONEXISTENT\020\002\022 \n\034_REJE"
  "CTED_SESSION_TABLE_FULL\020\003\022$\n _REJECTED_S"
  "ESSION_ALREADY_EXISTS\020\004\022\027\n\023_NO_CLOSED_SE"
  "SSIONS\020\005\022\034\n\030_REJECTED_INTERNAL_ERROR\020\006*>"
  "\n\nActionType\022\t\n\005_DROP\020\000\022\014\n\010_FORWARD\020\001\022\013\n"
  "\007_MIRROR\020\002\022\n\n\006_SNOOP\020\0032\267\003\n\014SessionTable\022"
  "T\n\nAddSession\022\036.openoffload.v2.SessionRe"
  "quest\032\".openoffload.v2.AddSessionRespons"
  "e\"\000(\001\022J\n\nGetSession\022\031.openoffload.v2.Ses"
  "sionId\032\037.openoffload.v2.SessionResponse\""
  "\000\022M\n\rDeleteSession\022\031.openoffload.v2.Sess"
  "ionId\032\037.openoffload.v2.SessionResponse\"\000"
  "\022X\n\016GetAllSessions\022\".openoffload.v2.Sess"
  "ionRequestArgs\032 .openoffload.v2.SessionR"
  "esponses\"\000\022\\\n\021GetClosedSessions\022\".openof"
  "fload.v2.SessionRequestArgs\032\037.openoffloa"
  "d.v2.SessionResponse\"\0000\001B\?Z=github.com/o"
  "piproject/sessionOffload/sessionoffload/"
  "v2/gen/gob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openoffload_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openoffload_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openoffload_2eproto = {
  false, false, 2697, descriptor_table_protodef_openoffload_2eproto, "openoffload.proto", 
  &descriptor_table_openoffload_2eproto_once, descriptor_table_openoffload_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_openoffload_2eproto::offsets,
  file_level_metadata_openoffload_2eproto, file_level_enum_descriptors_openoffload_2eproto, file_level_service_descriptors_openoffload_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_openoffload_2eproto_getter() {
  return &descriptor_table_openoffload_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_openoffload_2eproto(&descriptor_table_openoffload_2eproto);
namespace openoffload {
namespace v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IpVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[0];
}
bool IpVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[1];
}
bool ProtocolId_IsValid(int value) {
  switch (value) {
    case 0:
    case 6:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[2];
}
bool SessionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionCloseCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[3];
}
bool SessionCloseCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddSessionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[4];
}
bool AddSessionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[5];
}
bool RequestStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openoffload_2eproto);
  return file_level_enum_descriptors_openoffload_2eproto[6];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Uuid::_Internal {
 public:
};

Uuid::Uuid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openoffload.v2.Uuid)
}
Uuid::Uuid(const Uuid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:openoffload.v2.Uuid)
}

inline void Uuid::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Uuid::~Uuid() {
  // @@protoc_insertion_point(destructor:openoffload.v2.Uuid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Uuid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Uuid::ArenaDtor(void* object) {
  Uuid* _this = reinterpret_cast< Uuid* >(object);
  (void)_this;
}
void Uuid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Uuid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Uuid::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v2.Uuid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uuid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openoffload.v2.Uuid.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Uuid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v2.Uuid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openoffload.v2.Uuid.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v2.Uuid)
  return target;
}

size_t Uuid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v2.Uuid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Uuid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Uuid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Uuid::GetClassData() const { return &_class_data_; }

void Uuid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Uuid *>(to)->MergeFrom(
      static_cast<const Uuid &>(from));
}


void Uuid::MergeFrom(const Uuid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v2.Uuid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Uuid::CopyFrom(const Uuid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v2.Uuid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uuid::IsInitialized() const {
  return true;
}

void Uuid::InternalSwap(Uuid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Uuid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[0]);
}

// ===================================================================

class SessionId::_Internal {
 public:
};

SessionId::SessionId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openoffload.v2.SessionId)
}
SessionId::SessionId(const SessionId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:openoffload.v2.SessionId)
}

inline void SessionId::SharedCtor() {
session_id_ = uint64_t{0u};
}

SessionId::~SessionId() {
  // @@protoc_insertion_point(destructor:openoffload.v2.SessionId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SessionId::ArenaDtor(void* object) {
  SessionId* _this = reinterpret_cast< SessionId* >(object);
  (void)_this;
}
void SessionId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionId::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v2.SessionId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v2.SessionId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v2.SessionId)
  return target;
}

size_t SessionId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v2.SessionId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionId::GetClassData() const { return &_class_data_; }

void SessionId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionId *>(to)->MergeFrom(
      static_cast<const SessionId &>(from));
}


void SessionId::MergeFrom(const SessionId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v2.SessionId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionId::CopyFrom(const SessionId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v2.SessionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionId::IsInitialized() const {
  return true;
}

void SessionId::InternalSwap(SessionId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[1]);
}

// ===================================================================

class ActionParameters::_Internal {
 public:
};

ActionParameters::ActionParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openoffload.v2.ActionParameters)
}
ActionParameters::ActionParameters(const ActionParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_next_hop_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_next_hop_v6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action_next_hop_v6().empty()) {
    action_next_hop_v6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action_next_hop_v6(), 
      GetArenaForAllocation());
  }
  ::memcpy(&action_type_, &from.action_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_next_hop_) -
    reinterpret_cast<char*>(&action_type_)) + sizeof(action_next_hop_));
  // @@protoc_insertion_point(copy_constructor:openoffload.v2.ActionParameters)
}

inline void ActionParameters::SharedCtor() {
action_next_hop_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_next_hop_v6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_next_hop_) -
    reinterpret_cast<char*>(&action_type_)) + sizeof(action_next_hop_));
}

ActionParameters::~ActionParameters() {
  // @@protoc_insertion_point(destructor:openoffload.v2.ActionParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_next_hop_v6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActionParameters::ArenaDtor(void* object) {
  ActionParameters* _this = reinterpret_cast< ActionParameters* >(object);
  (void)_this;
}
void ActionParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v2.ActionParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_next_hop_v6_.ClearToEmpty();
  ::memset(&action_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_next_hop_) -
      reinterpret_cast<char*>(&action_type_)) + sizeof(action_next_hop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openoffload.v2.ActionType action_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action_type(static_cast<::openoffload::v2::ActionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 action_next_hop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          action_next_hop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes action_next_hop_v6 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action_next_hop_v6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v2.ActionParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .openoffload.v2.ActionType action_type = 1;
  if (this->_internal_action_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action_type(), target);
  }

  // uint32 action_next_hop = 2;
  if (this->_internal_action_next_hop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_action_next_hop(), target);
  }

  // bytes action_next_hop_v6 = 3;
  if (!this->_internal_action_next_hop_v6().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_action_next_hop_v6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v2.ActionParameters)
  return target;
}

size_t ActionParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v2.ActionParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes action_next_hop_v6 = 3;
  if (!this->_internal_action_next_hop_v6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_action_next_hop_v6());
  }

  // .openoffload.v2.ActionType action_type = 1;
  if (this->_internal_action_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action_type());
  }

  // uint32 action_next_hop = 2;
  if (this->_internal_action_next_hop() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_action_next_hop());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionParameters::GetClassData() const { return &_class_data_; }

void ActionParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionParameters *>(to)->MergeFrom(
      static_cast<const ActionParameters &>(from));
}


void ActionParameters::MergeFrom(const ActionParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v2.ActionParameters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action_next_hop_v6().empty()) {
    _internal_set_action_next_hop_v6(from._internal_action_next_hop_v6());
  }
  if (from._internal_action_type() != 0) {
    _internal_set_action_type(from._internal_action_type());
  }
  if (from._internal_action_next_hop() != 0) {
    _internal_set_action_next_hop(from._internal_action_next_hop());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionParameters::CopyFrom(const ActionParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v2.ActionParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionParameters::IsInitialized() const {
  return true;
}

void ActionParameters::InternalSwap(ActionParameters* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_next_hop_v6_, lhs_arena,
      &other->action_next_hop_v6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionParameters, action_next_hop_)
      + sizeof(ActionParameters::action_next_hop_)
      - PROTOBUF_FIELD_OFFSET(ActionParameters, action_type_)>(
          reinterpret_cast<char*>(&action_type_),
          reinterpret_cast<char*>(&other->action_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[2]);
}

// ===================================================================

class SessionRequest::_Internal {
 public:
  static const ::openoffload::v2::ActionParameters& action(const SessionRequest* msg);
};

const ::openoffload::v2::ActionParameters&
SessionRequest::_Internal::action(const SessionRequest* msg) {
  return *msg->action_;
}
SessionRequest::SessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openoffload.v2.SessionRequest)
}
SessionRequest::SessionRequest(const SessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_ipv6().empty()) {
    source_ipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_ipv6(), 
      GetArenaForAllocation());
  }
  destination_ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    destination_ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_ipv6().empty()) {
    destination_ipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destination_ipv6(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_action()) {
    action_ = new ::openoffload::v2::ActionParameters(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cache_timeout_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(cache_timeout_));
  // @@protoc_insertion_point(copy_constructor:openoffload.v2.SessionRequest)
}

inline void SessionRequest::SharedCtor() {
source_ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
destination_ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  destination_ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cache_timeout_) -
    reinterpret_cast<char*>(&action_)) + sizeof(cache_timeout_));
}

SessionRequest::~SessionRequest() {
  // @@protoc_insertion_point(destructor:openoffload.v2.SessionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_ipv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_ipv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete action_;
}

void SessionRequest::ArenaDtor(void* object) {
  SessionRequest* _this = reinterpret_cast< SessionRequest* >(object);
  (void)_this;
}
void SessionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v2.SessionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_ipv6_.ClearToEmpty();
  destination_ipv6_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cache_timeout_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(cache_timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 in_lif = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          in_lif_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 out_lif = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          out_lif_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .openoffload.v2.IpVersion ip_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ip_version(static_cast<::openoffload::v2::IpVersion>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 source_ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          source_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes source_ipv6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_source_ipv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 source_port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          source_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 destination_ip = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          destination_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes destination_ipv6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_destination_ipv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 destination_port = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          destination_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .openoffload.v2.ProtocolId protocol_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol_id(static_cast<::openoffload::v2::ProtocolId>(val));
        } else
          goto handle_unusual;
        continue;
      // .openoffload.v2.ActionParameters action = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cache_timeout = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          cache_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v2.SessionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session_id(), target);
  }

  // int32 in_lif = 2;
  if (this->_internal_in_lif() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_in_lif(), target);
  }

  // int32 out_lif = 3;
  if (this->_internal_out_lif() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_out_lif(), target);
  }

  // .openoffload.v2.IpVersion ip_version = 4;
  if (this->_internal_ip_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_ip_version(), target);
  }

  // uint32 source_ip = 5;
  if (this->_internal_source_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_source_ip(), target);
  }

  // bytes source_ipv6 = 6;
  if (!this->_internal_source_ipv6().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_source_ipv6(), target);
  }

  // uint32 source_port = 7;
  if (this->_internal_source_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_source_port(), target);
  }

  // uint32 destination_ip = 8;
  if (this->_internal_destination_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_destination_ip(), target);
  }

  // bytes destination_ipv6 = 9;
  if (!this->_internal_destination_ipv6().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_destination_ipv6(), target);
  }

  // uint32 destination_port = 10;
  if (this->_internal_destination_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_destination_port(), target);
  }

  // .openoffload.v2.ProtocolId protocol_id = 11;
  if (this->_internal_protocol_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_protocol_id(), target);
  }

  // .openoffload.v2.ActionParameters action = 12;
  if (this->_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::action(this), target, stream);
  }

  // uint32 cache_timeout = 13;
  if (this->_internal_cache_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_cache_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v2.SessionRequest)
  return target;
}

size_t SessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v2.SessionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes source_ipv6 = 6;
  if (!this->_internal_source_ipv6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_source_ipv6());
  }

  // bytes destination_ipv6 = 9;
  if (!this->_internal_destination_ipv6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_destination_ipv6());
  }

  // .openoffload.v2.ActionParameters action = 12;
  if (this->_internal_has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // uint64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_session_id());
  }

  // int32 in_lif = 2;
  if (this->_internal_in_lif() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_in_lif());
  }

  // int32 out_lif = 3;
  if (this->_internal_out_lif() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_out_lif());
  }

  // .openoffload.v2.IpVersion ip_version = 4;
  if (this->_internal_ip_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ip_version());
  }

  // uint32 source_ip = 5;
  if (this->_internal_source_ip() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_source_ip());
  }

  // uint32 source_port = 7;
  if (this->_internal_source_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_source_port());
  }

  // uint32 destination_ip = 8;
  if (this->_internal_destination_ip() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_destination_ip());
  }

  // uint32 destination_port = 10;
  if (this->_internal_destination_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_destination_port());
  }

  // .openoffload.v2.ProtocolId protocol_id = 11;
  if (this->_internal_protocol_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol_id());
  }

  // uint32 cache_timeout = 13;
  if (this->_internal_cache_timeout() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cache_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionRequest::GetClassData() const { return &_class_data_; }

void SessionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionRequest *>(to)->MergeFrom(
      static_cast<const SessionRequest &>(from));
}


void SessionRequest::MergeFrom(const SessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v2.SessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_source_ipv6().empty()) {
    _internal_set_source_ipv6(from._internal_source_ipv6());
  }
  if (!from._internal_destination_ipv6().empty()) {
    _internal_set_destination_ipv6(from._internal_destination_ipv6());
  }
  if (from._internal_has_action()) {
    _internal_mutable_action()->::openoffload::v2::ActionParameters::MergeFrom(from._internal_action());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_in_lif() != 0) {
    _internal_set_in_lif(from._internal_in_lif());
  }
  if (from._internal_out_lif() != 0) {
    _internal_set_out_lif(from._internal_out_lif());
  }
  if (from._internal_ip_version() != 0) {
    _internal_set_ip_version(from._internal_ip_version());
  }
  if (from._internal_source_ip() != 0) {
    _internal_set_source_ip(from._internal_source_ip());
  }
  if (from._internal_source_port() != 0) {
    _internal_set_source_port(from._internal_source_port());
  }
  if (from._internal_destination_ip() != 0) {
    _internal_set_destination_ip(from._internal_destination_ip());
  }
  if (from._internal_destination_port() != 0) {
    _internal_set_destination_port(from._internal_destination_port());
  }
  if (from._internal_protocol_id() != 0) {
    _internal_set_protocol_id(from._internal_protocol_id());
  }
  if (from._internal_cache_timeout() != 0) {
    _internal_set_cache_timeout(from._internal_cache_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionRequest::CopyFrom(const SessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v2.SessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRequest::IsInitialized() const {
  return true;
}

void SessionRequest::InternalSwap(SessionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_ipv6_, lhs_arena,
      &other->source_ipv6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &destination_ipv6_, lhs_arena,
      &other->destination_ipv6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionRequest, cache_timeout_)
      + sizeof(SessionRequest::cache_timeout_)
      - PROTOBUF_FIELD_OFFSET(SessionRequest, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[3]);
}

// ===================================================================

class SessionResponseError::_Internal {
 public:
};

SessionResponseError::SessionResponseError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openoffload.v2.SessionResponseError)
}
SessionResponseError::SessionResponseError(const SessionResponseError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_status_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(error_status_));
  // @@protoc_insertion_point(copy_constructor:openoffload.v2.SessionResponseError)
}

inline void SessionResponseError::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_status_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(error_status_));
}

SessionResponseError::~SessionResponseError() {
  // @@protoc_insertion_point(destructor:openoffload.v2.SessionResponseError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionResponseError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SessionResponseError::ArenaDtor(void* object) {
  SessionResponseError* _this = reinterpret_cast< SessionResponseError* >(object);
  (void)_this;
}
void SessionResponseError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionResponseError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionResponseError::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v2.SessionResponseError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_status_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(error_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionResponseError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 error_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          error_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionResponseError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v2.SessionResponseError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session_id(), target);
  }

  // int32 error_status = 2;
  if (this->_internal_error_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_error_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v2.SessionResponseError)
  return target;
}

size_t SessionResponseError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v2.SessionResponseError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_session_id());
  }

  // int32 error_status = 2;
  if (this->_internal_error_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_error_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionResponseError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionResponseError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionResponseError::GetClassData() const { return &_class_data_; }

void SessionResponseError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionResponseError *>(to)->MergeFrom(
      static_cast<const SessionResponseError &>(from));
}


void SessionResponseError::MergeFrom(const SessionResponseError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v2.SessionResponseError)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_error_status() != 0) {
    _internal_set_error_status(from._internal_error_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionResponseError::CopyFrom(const SessionResponseError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v2.SessionResponseError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionResponseError::IsInitialized() const {
  return true;
}

void SessionResponseError::InternalSwap(SessionResponseError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionResponseError, error_status_)
      + sizeof(SessionResponseError::error_status_)
      - PROTOBUF_FIELD_OFFSET(SessionResponseError, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionResponseError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[4]);
}

// ===================================================================

class SessionResponses::_Internal {
 public:
};

SessionResponses::SessionResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  session_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openoffload.v2.SessionResponses)
}
SessionResponses::SessionResponses(const SessionResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      session_info_(from.session_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_key_ = from.next_key_;
  // @@protoc_insertion_point(copy_constructor:openoffload.v2.SessionResponses)
}

inline void SessionResponses::SharedCtor() {
next_key_ = uint64_t{0u};
}

SessionResponses::~SessionResponses() {
  // @@protoc_insertion_point(destructor:openoffload.v2.SessionResponses)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SessionResponses::ArenaDtor(void* object) {
  SessionResponses* _this = reinterpret_cast< SessionResponses* >(object);
  (void)_this;
}
void SessionResponses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionResponses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v2.SessionResponses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_info_.Clear();
  next_key_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionResponses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openoffload.v2.SessionResponse session_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_session_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 next_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          next_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionResponses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v2.SessionResponses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openoffload.v2.SessionResponse session_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_session_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_session_info(i), target, stream);
  }

  // uint64 next_key = 2;
  if (this->_internal_next_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_next_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v2.SessionResponses)
  return target;
}

size_t SessionResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v2.SessionResponses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openoffload.v2.SessionResponse session_info = 1;
  total_size += 1UL * this->_internal_session_info_size();
  for (const auto& msg : this->session_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 next_key = 2;
  if (this->_internal_next_key() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_next_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionResponses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionResponses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionResponses::GetClassData() const { return &_class_data_; }

void SessionResponses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionResponses *>(to)->MergeFrom(
      static_cast<const SessionResponses &>(from));
}


void SessionResponses::MergeFrom(const SessionResponses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v2.SessionResponses)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  session_info_.MergeFrom(from.session_info_);
  if (from._internal_next_key() != 0) {
    _internal_set_next_key(from._internal_next_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionResponses::CopyFrom(const SessionResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v2.SessionResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionResponses::IsInitialized() const {
  return true;
}

void SessionResponses::InternalSwap(SessionResponses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  session_info_.InternalSwap(&other->session_info_);
  swap(next_key_, other->next_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionResponses::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[5]);
}

// ===================================================================

class AddSessionResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const AddSessionResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AddSessionResponse::_Internal::start_time(const AddSessionResponse* msg) {
  return *msg->start_time_;
}
void AddSessionResponse::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
AddSessionResponse::AddSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  response_error_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openoffload.v2.AddSessionResponse)
}
AddSessionResponse::AddSessionResponse(const AddSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      response_error_(from.response_error_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  ::memcpy(&error_status_, &from.error_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_status_) -
    reinterpret_cast<char*>(&error_status_)) + sizeof(request_status_));
  // @@protoc_insertion_point(copy_constructor:openoffload.v2.AddSessionResponse)
}

inline void AddSessionResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_status_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(request_status_));
}

AddSessionResponse::~AddSessionResponse() {
  // @@protoc_insertion_point(destructor:openoffload.v2.AddSessionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddSessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_time_;
}

void AddSessionResponse::ArenaDtor(void* object) {
  AddSessionResponse* _this = reinterpret_cast< AddSessionResponse* >(object);
  (void)_this;
}
void AddSessionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddSessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v2.AddSessionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_error_.Clear();
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  ::memset(&error_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_status_) -
      reinterpret_cast<char*>(&error_status_)) + sizeof(request_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddSessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openoffload.v2.AddSessionStatus request_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_request_status(static_cast<::openoffload::v2::AddSessionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 error_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          error_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .openoffload.v2.SessionResponseError response_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_response_error(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddSessionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v2.AddSessionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .openoffload.v2.AddSessionStatus request_status = 1;
  if (this->_internal_request_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_request_status(), target);
  }

  // uint64 error_status = 2;
  if (this->_internal_error_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_error_status(), target);
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->_internal_has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::start_time(this), target, stream);
  }

  // repeated .openoffload.v2.SessionResponseError response_error = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_response_error_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_response_error(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v2.AddSessionResponse)
  return target;
}

size_t AddSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v2.AddSessionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openoffload.v2.SessionResponseError response_error = 4;
  total_size += 1UL * this->_internal_response_error_size();
  for (const auto& msg : this->response_error_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // uint64 error_status = 2;
  if (this->_internal_error_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_error_status());
  }

  // .openoffload.v2.AddSessionStatus request_status = 1;
  if (this->_internal_request_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_request_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddSessionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddSessionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddSessionResponse::GetClassData() const { return &_class_data_; }

void AddSessionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddSessionResponse *>(to)->MergeFrom(
      static_cast<const AddSessionResponse &>(from));
}


void AddSessionResponse::MergeFrom(const AddSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v2.AddSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  response_error_.MergeFrom(from.response_error_);
  if (from._internal_has_start_time()) {
    _internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from._internal_error_status() != 0) {
    _internal_set_error_status(from._internal_error_status());
  }
  if (from._internal_request_status() != 0) {
    _internal_set_request_status(from._internal_request_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddSessionResponse::CopyFrom(const AddSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v2.AddSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSessionResponse::IsInitialized() const {
  return true;
}

void AddSessionResponse::InternalSwap(AddSessionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  response_error_.InternalSwap(&other->response_error_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddSessionResponse, request_status_)
      + sizeof(AddSessionResponse::request_status_)
      - PROTOBUF_FIELD_OFFSET(AddSessionResponse, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddSessionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[6]);
}

// ===================================================================

class SessionResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const SessionResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const SessionResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SessionResponse::_Internal::start_time(const SessionResponse* msg) {
  return *msg->start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SessionResponse::_Internal::end_time(const SessionResponse* msg) {
  return *msg->end_time_;
}
void SessionResponse::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void SessionResponse::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
SessionResponse::SessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openoffload.v2.SessionResponse)
}
SessionResponse::SessionResponse(const SessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_status_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(request_status_));
  // @@protoc_insertion_point(copy_constructor:openoffload.v2.SessionResponse)
}

inline void SessionResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_status_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(request_status_));
}

SessionResponse::~SessionResponse() {
  // @@protoc_insertion_point(destructor:openoffload.v2.SessionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void SessionResponse::ArenaDtor(void* object) {
  SessionResponse* _this = reinterpret_cast< SessionResponse* >(object);
  (void)_this;
}
void SessionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v2.SessionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_status_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(request_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_packets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          in_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_packets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          out_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          in_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          out_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .openoffload.v2.SessionState session_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_state(static_cast<::openoffload::v2::SessionState>(val));
        } else
          goto handle_unusual;
        continue;
      // .openoffload.v2.SessionCloseCode session_close_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_close_code(static_cast<::openoffload::v2::SessionCloseCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .openoffload.v2.RequestStatus request_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_request_status(static_cast<::openoffload::v2::RequestStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v2.SessionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session_id(), target);
  }

  // uint64 in_packets = 2;
  if (this->_internal_in_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_in_packets(), target);
  }

  // uint64 out_packets = 3;
  if (this->_internal_out_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_out_packets(), target);
  }

  // uint64 in_bytes = 4;
  if (this->_internal_in_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_in_bytes(), target);
  }

  // uint64 out_bytes = 5;
  if (this->_internal_out_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_out_bytes(), target);
  }

  // .openoffload.v2.SessionState session_state = 6;
  if (this->_internal_session_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_session_state(), target);
  }

  // .openoffload.v2.SessionCloseCode session_close_code = 7;
  if (this->_internal_session_close_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_session_close_code(), target);
  }

  // .openoffload.v2.RequestStatus request_status = 8;
  if (this->_internal_request_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_request_status(), target);
  }

  // .google.protobuf.Timestamp start_time = 9;
  if (this->_internal_has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 10;
  if (this->_internal_has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::end_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v2.SessionResponse)
  return target;
}

size_t SessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v2.SessionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 9;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 10;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // uint64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_session_id());
  }

  // uint64 in_packets = 2;
  if (this->_internal_in_packets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_packets());
  }

  // uint64 out_packets = 3;
  if (this->_internal_out_packets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_packets());
  }

  // uint64 in_bytes = 4;
  if (this->_internal_in_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_bytes());
  }

  // uint64 out_bytes = 5;
  if (this->_internal_out_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_bytes());
  }

  // .openoffload.v2.SessionState session_state = 6;
  if (this->_internal_session_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_state());
  }

  // .openoffload.v2.SessionCloseCode session_close_code = 7;
  if (this->_internal_session_close_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_close_code());
  }

  // .openoffload.v2.RequestStatus request_status = 8;
  if (this->_internal_request_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_request_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionResponse::GetClassData() const { return &_class_data_; }

void SessionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionResponse *>(to)->MergeFrom(
      static_cast<const SessionResponse &>(from));
}


void SessionResponse::MergeFrom(const SessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v2.SessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start_time()) {
    _internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_in_packets() != 0) {
    _internal_set_in_packets(from._internal_in_packets());
  }
  if (from._internal_out_packets() != 0) {
    _internal_set_out_packets(from._internal_out_packets());
  }
  if (from._internal_in_bytes() != 0) {
    _internal_set_in_bytes(from._internal_in_bytes());
  }
  if (from._internal_out_bytes() != 0) {
    _internal_set_out_bytes(from._internal_out_bytes());
  }
  if (from._internal_session_state() != 0) {
    _internal_set_session_state(from._internal_session_state());
  }
  if (from._internal_session_close_code() != 0) {
    _internal_set_session_close_code(from._internal_session_close_code());
  }
  if (from._internal_request_status() != 0) {
    _internal_set_request_status(from._internal_request_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionResponse::CopyFrom(const SessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v2.SessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionResponse::IsInitialized() const {
  return true;
}

void SessionResponse::InternalSwap(SessionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionResponse, request_status_)
      + sizeof(SessionResponse::request_status_)
      - PROTOBUF_FIELD_OFFSET(SessionResponse, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[7]);
}

// ===================================================================

class SessionRequestArgs::_Internal {
 public:
};

SessionRequestArgs::SessionRequestArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openoffload.v2.SessionRequestArgs)
}
SessionRequestArgs::SessionRequestArgs(const SessionRequestArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&page_size_, &from.page_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_session_) -
    reinterpret_cast<char*>(&page_size_)) + sizeof(start_session_));
  // @@protoc_insertion_point(copy_constructor:openoffload.v2.SessionRequestArgs)
}

inline void SessionRequestArgs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&page_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_session_) -
    reinterpret_cast<char*>(&page_size_)) + sizeof(start_session_));
}

SessionRequestArgs::~SessionRequestArgs() {
  // @@protoc_insertion_point(destructor:openoffload.v2.SessionRequestArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionRequestArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SessionRequestArgs::ArenaDtor(void* object) {
  SessionRequestArgs* _this = reinterpret_cast< SessionRequestArgs* >(object);
  (void)_this;
}
void SessionRequestArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionRequestArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionRequestArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:openoffload.v2.SessionRequestArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_session_) -
      reinterpret_cast<char*>(&page_size_)) + sizeof(start_session_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionRequestArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 start_session = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          start_session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionRequestArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openoffload.v2.SessionRequestArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page_size(), target);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint64 start_session = 3;
  if (this->_internal_start_session() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_start_session(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openoffload.v2.SessionRequestArgs)
  return target;
}

size_t SessionRequestArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openoffload.v2.SessionRequestArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page_size());
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint64 start_session = 3;
  if (this->_internal_start_session() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_start_session());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionRequestArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionRequestArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionRequestArgs::GetClassData() const { return &_class_data_; }

void SessionRequestArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionRequestArgs *>(to)->MergeFrom(
      static_cast<const SessionRequestArgs &>(from));
}


void SessionRequestArgs::MergeFrom(const SessionRequestArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openoffload.v2.SessionRequestArgs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_start_session() != 0) {
    _internal_set_start_session(from._internal_start_session());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionRequestArgs::CopyFrom(const SessionRequestArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openoffload.v2.SessionRequestArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRequestArgs::IsInitialized() const {
  return true;
}

void SessionRequestArgs::InternalSwap(SessionRequestArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionRequestArgs, start_session_)
      + sizeof(SessionRequestArgs::start_session_)
      - PROTOBUF_FIELD_OFFSET(SessionRequestArgs, page_size_)>(
          reinterpret_cast<char*>(&page_size_),
          reinterpret_cast<char*>(&other->page_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionRequestArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openoffload_2eproto_getter, &descriptor_table_openoffload_2eproto_once,
      file_level_metadata_openoffload_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace openoffload
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openoffload::v2::Uuid* Arena::CreateMaybeMessage< ::openoffload::v2::Uuid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v2::Uuid >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v2::SessionId* Arena::CreateMaybeMessage< ::openoffload::v2::SessionId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v2::SessionId >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v2::ActionParameters* Arena::CreateMaybeMessage< ::openoffload::v2::ActionParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v2::ActionParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v2::SessionRequest* Arena::CreateMaybeMessage< ::openoffload::v2::SessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v2::SessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v2::SessionResponseError* Arena::CreateMaybeMessage< ::openoffload::v2::SessionResponseError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v2::SessionResponseError >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v2::SessionResponses* Arena::CreateMaybeMessage< ::openoffload::v2::SessionResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v2::SessionResponses >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v2::AddSessionResponse* Arena::CreateMaybeMessage< ::openoffload::v2::AddSessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v2::AddSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v2::SessionResponse* Arena::CreateMaybeMessage< ::openoffload::v2::SessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v2::SessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::openoffload::v2::SessionRequestArgs* Arena::CreateMaybeMessage< ::openoffload::v2::SessionRequestArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openoffload::v2::SessionRequestArgs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
