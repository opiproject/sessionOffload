---
name: 'OPI sessionOffload golang Framework CI'

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'openoffload/go/**'
      - 'sessionoffload/**'
      - '.github/workflows/framework-golang.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'openoffload/go/**'
      - 'sessionoffload/**'
      - '.github/workflows/framework-golang.yml'

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io

concurrency:
  # if workflow for PR or push is already running stop it, and start new one
  group: sessionoffload-framework-golang-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sessionoffload-framework-golang-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
          - client
          - xdp
    steps:
    - uses: actions/checkout@v3
    - uses: docker/setup-qemu-action@v2
    - uses: docker/setup-buildx-action@b167a89702b8b5314c104ab9d211b3dcf774f2b1

    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/opi-sessionoffload-${{ matrix.package }}

    - name: Build and push Docker image
      if: matrix.package != 'xdp'
      id: build-and-push
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: openoffload/go/${{ matrix.package }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Docker image
      if: matrix.package == 'xdp'
      id: build-and-push-xdp
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: openoffload/go
        file: openoffload/go/${{ matrix.package }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  sessionoffload-framework-golang-ci:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    # Workaround: https://github.com/docker/build-push-action/issues/461
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@b167a89702b8b5314c104ab9d211b3dcf774f2b1

    - name: Start containers
      run: docker-compose up -d
      working-directory: openoffload/go

    - name: Logs
      if: failure()
      run: docker-compose logs
      working-directory: openoffload/go

    - name: Stop containers
      if: always()
      run: docker-compose down
      working-directory: openoffload/go

    - name: Run Tests
      run: |
        set -x
        docker-compose up -d
        docker-compose ps
        docker-compose up -d opi-sessionoffload-client
        grpc_cli=(docker run --network=go_intranet --rm namely/grpc-cli)
        "${grpc_cli[@]}" ls opi-sessionoffload-server:50151
        "${grpc_cli[@]}" ls opi-sessionoffload-server:50151 openoffload.v2.SessionTable -l
        "${grpc_cli[@]}" ls opi-sessionoffload-server:50151 openoffload.v2.SessionTable.AddSession -l
        "${grpc_cli[@]}" ls opi-sessionoffload-server:50151 openoffload.v2.SessionTable.GetSession -l
        "${grpc_cli[@]}" ls opi-sessionoffload-server:50151 openoffload.v2.SessionTable.DeleteSession -l
        "${grpc_cli[@]}" ls opi-sessionoffload-server:50151 openoffload.v2.SessionTable.GetAllSessions -l
        "${grpc_cli[@]}" ls opi-sessionoffload-server:50151 openoffload.v2.SessionTable.GetClosedSessions -l
      working-directory: openoffload/go

    - name: Logs
      if: always()
      run: docker-compose logs
      working-directory: openoffload/go

    - name: Stop containers
      if: always()
      run: docker-compose down
      working-directory: openoffload/go
